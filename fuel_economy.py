# -*- coding: utf-8 -*-
"""Fuel Economy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZNvK739Bg2qQlf6FxTvZ1cy9X2ivpjY
"""

# Commented out IPython magic to ensure Python compatibility.
# import necessary libraries
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

# Data I have used 
df_08 = pd.read_csv('all_alpha_08.csv')
df_18 = pd.read_csv('all_alpha_18.csv')

"""## Assessing"""

# To get number of rows and number of column
print(df_08.shape)
print(df_18.shape)

# To count number of duplicated Rows of my data
print(df_08.duplicated().sum())
print(df_18.duplicated().sum())

# To count each row have a missing value
print(sum([True for idx,row in df_08.iterrows() if any(row.isnull())]))
print(sum([True for idx,row in df_18.iterrows() if any(row.isnull())]))

# datatype for each feature (some of these may not be ideal)
df_08.info()

df_18.info()

# to count number of non-null unique values for specific column'SmartWay'.
print(df_08['SmartWay'].nunique())
print(df_18['SmartWay'].nunique())

# to count number of non-null unique values for specific column'Sales Area' & 'Cert Region'.
print(df_08['Sales Area'].nunique())
print(df_18['Cert Region'].nunique())

# To check if specific value exists in column.
print('Electricity' in set(df_08['Fuel']))
print('Electricity' in set(df_18['Fuel']))

"""## Cleaning """

# Copy of my data To start cleaning
df_08_copy = df_08.copy()
df_18_copy = df_18.copy()

# Drop unecessary column which (not present in both datasets) 
df_08_copy.drop(['Stnd', 'Underhood ID', 'FE Calc Appr', 'Unadj Cmb MPG'], axis=1, inplace=True)
df_18_copy.drop(['Stnd', 'Stnd Description', 'Underhood ID', 'Comb CO2'], axis=1, inplace=True)

# to check columns header.
df_08_copy.head(1)

# Rename column label in the 2008 dataset to "Cert Region" for consistency.
df_08_copy.rename(columns = {"Sales Area":"Cert Region"}, inplace=True)

df_08_copy.head(1)

# eplace spaces with underscores and convert everything to lowercase.
df_08_copy.columns = df_08_copy.columns.str.replace(" ", "_").str.lower()
df_18_copy.columns = df_18_copy.columns.str.replace(" ", "_").str.lower()

df_08_copy.head(1)

df_18_copy.head(1)

# confirm column labels for 2008 and 2018 datasets are identical
df_08_copy.columns == df_18_copy.columns

# To Filter only compare cars certified by California standards. 
df_08_copy = df_08_copy.query("cert_region == 'CA'")
df_18_copy = df_18_copy.query("cert_region == 'CA'")

# To drop specific column.
df_08_copy.drop(["cert_region"], axis=1, inplace=True)
df_18_copy.drop(["cert_region"], axis=1, inplace=True)

df_08_copy.head(1)

df_18_copy.head(1)

# to Drop any rows that contain missing values.
df_08_copy.dropna(inplace=True)

# to Drop any rows that contain missing values.
df_18_copy.dropna(inplace=True)

# print number of duplicates again to confirm dedupe - should both be 0
print(df_08.duplicated().sum())
print(df_18.duplicated().sum())

"""# Inspecting Data Types"""

df_08_copy.head()

df_18_copy.head()

df_08_copy.head()

df_18_copy.info()

df_08_copy.air_pollution_score.value_counts()

df_18_copy.air_pollution_score.value_counts()

df_18_copy.cyl.value_counts()

df_08_copy.greenhouse_gas_score.unique()

"""##### Following features need to be converted to floats from strings.

*  city_mpg: 2008 & 2018.

* hwy_mpg: 2008 & 2018.

* cmb: 2008 & 2018.

* air_pollution_score: 2008 & 2018.

##### Extract ints from the strings in the 2008 (cyl column).

##### Following features need to be converted to ints from strings.

* cyl column: 2018.

* greenhouse_gas_score: 2008.

# Fixing Type issues

#### -  Next, I wll make the following changes to make the datatypes consistent and practical to work with.

* extract int from string in (cyl : 2008) column .
"""

# extract int from string in (cyl : 2008) column .
df_08_copy['cyl'] = df_08_copy.cyl.str.extract(r'(\d+[.\d]*)').astype(int)

"""* convert float to int in (cyl : 2018) column."""

# convert float to int.
df_18_copy.cyl = df_18_copy.cyl.astype(int)

"""* convert string to float in (city mpg & hwy_mpg & cmb_mpg: 2008 & 2018) column.

###### There are some columns have mathematical operation like "17/9" which can't covert them to any numircal type untill convert '17/9' to '1.8888889'.
"""

# Evaluating a mathematical expression in a string in (city mpg & hwy_mpg & cmb_mpg : 2008 & 2018)column.
df_18_copy['city_mpg'] = df_18_copy['city_mpg'].map(lambda x:eval(x))
df_08_copy['city_mpg'] = df_08_copy['city_mpg'].map(lambda x:eval(x))
df_18_copy['hwy_mpg'] = df_18_copy['hwy_mpg'].map(lambda x:eval(x))
df_08_copy['hwy_mpg'] = df_08_copy['hwy_mpg'].map(lambda x:eval(x))
df_18_copy['cmb_mpg'] = df_18_copy['cmb_mpg'].map(lambda x:eval(x))
df_08_copy['cmb_mpg'] = df_08_copy['cmb_mpg'].map(lambda x:eval(x))
df_08_copy['air_pollution_score'] = df_08_copy['air_pollution_score'].map(lambda x:eval(x))
df_08_copy['greenhouse_gas_score'] = df_08_copy['greenhouse_gas_score'].map(lambda x:eval(x))

# convert mpg columns to floats
mpg_columns = ['city_mpg', 'hwy_mpg', 'cmb_mpg']
for c in mpg_columns:
    df_18_copy[c] = df_18_copy[c].astype(float)
    df_08_copy[c] = df_08_copy[c].astype(float)

# convert stirng to float.
df_08_copy.air_pollution_score = df_08_copy.air_pollution_score.astype(float)

# convert ints to float.
df_18_copy.air_pollution_score = df_18_copy.air_pollution_score.astype(float)

df_08_copy.greenhouse_gas_score.value_counts()

df_08_copy.greenhouse_gas_score = df_08_copy.greenhouse_gas_score.astype(int)

# To check
df_08_copy.greenhouse_gas_score.value_counts()

"""## check"""

df_08_copy.info()

"""# Conclusions & Visuals to answer questions.
1- Are more unique models using alternative fuels in 2018 compared to 2008? By how much?
"""

# to Know unique vlaues of fuel to detect alternative fuel
df_08_copy.fuel.value_counts()

# to Know unique vlaues of fuel to detect alternative fuel
df_18_copy.fuel.value_counts()

alt_08 = df_08_copy.query('fuel in ["CNG", "ethanol/gas"]').model.nunique()
alt_08

uni_models_18 = df_18_copy.query("fuel in ['ethanol/gas', 'Gasoline/Electricity']").model.nunique()
uni_models_18

plt.bar(["2008", "2018"], [alt_08, uni_models_18])
plt.title("Number of Unique Models Using Alternative Fuels")
plt.xlabel("Year")
plt.ylabel("Number of Unique Models");

"""2- How much have vehicle classes improved in fuel economy (increased in mpg)?"""

veh_08 = df_08_copy.groupby("veh_class").cmb_mpg.mean()
veh_08

veh_18 = df_18_copy.groupby("veh_class").cmb_mpg.mean()
veh_18

inc = veh_18 - veh_08
inc

inc.dropna(inplace = True)
plt.subplots(figsize=(8, 5))
plt.bar(inc.index, inc)
plt.title('Improvements in Fuel Economy from 2008 to 2018 by Vehicle Class')
plt.xlabel('Vehicle Class')
plt.ylabel('Increase in Average Combined MPG');

"""3- What are the characteristics of SmartWay vehicles? Have they changed over time? (mpg, greenhouse gas)"""

df_08_copy.smartway.unique()

df_08_copy.query('smartway == "yes"').describe()

df_18_copy.smartway.unique()

df_18_copy.query('smartway in ["yes","Elite"]').describe()

"""# Merging Two dataframes

##### Rename 2008 and 2018 columns to distinguish .
"""

# take the first 10 characters of the column label and and concatenate it with _2008 and 10 characters of the column label and and concatenate it with _2018.
df_08_copy.rename( columns =  lambda x: x[:10] + "_2008"  , inplace=True)
df_18_copy.rename( columns =  lambda x: x[:10] + "_2018"  , inplace=True)

df_08_copy.columns

df_18_copy.columns

"""### we are only interested in how the same model of car has been updated and how the new model's mpg compares to the old model's mpg."""

df_total =  df_08_copy.merge( df_18_copy, how='inner', left_on='model_2008', right_on='model_2018')

print(df_08_copy.shape)
print(df_18_copy.shape)

df_total.head(2)

df_total.shape

df_total.to_csv('cleaned_total.csv', index=False)

# Save your final CLEAN datasets as new files!
df_08_copy.to_csv('clean_08.csv', index=False)
df_18_copy.to_csv('clean_18.csv', index=False)



